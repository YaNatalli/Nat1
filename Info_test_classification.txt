Классификация тестирования по уровню детализации
Модульное (компонентное) тестирование - проверяются отдельные небольшие части приложения,т.е. тестирование программы на уровне отдельно взятых модулей, функций или классов.
Цель модульного тестирования состоит в выявлении ошибок в реализации алгоритмов, а также в определении степени готовности системы к переходу на следующий уровень разработки и тестирования.
Модульное тестирование проводится по методу “белого ящика”, т.е. основывается на знании внутренней структуры программы.
На уровне модульного тестирования проще всего обнаружить дефекты. связанные с алгоритмическими ошибками и ошибками кодирования алгоритмов, типа работы с условиями и счетчиками циклов, а также с использованием локальных переменных и ресурсов.

Интеграционное тестирование - проверяется взаимодействие между несколькими частями приложения, т.е. проводится для проверки совместной работы отдельных модулей и предшествует тестированию всей системы как единого целого. Это тестирование части системы, состоящей из двух и более модулей.
Задачей является поиск ошибок в реализации и интерпретации интерфейсного взаимодействия между модулями.

Системное тестирование - приложение проверяется как единое целое .
Основная задача - выявление проблем, связанная с работой системы в целом(неверное использование ресурсов системы, несовместимость с окружением, непредусмотренные сценарии использования, неудобство в применении, отсутствующая или неверная функциональность...).
Системное тестирование производится над проектом в целом методом “черного ящика”, т.е. структура программы не имеет никакого значения, для проверки доступны только входы и выходы, видимые пользователю. Тестированию подлежат коды и пользовательская документация. 

- по доступу к коду и архитектуре приложения (методы)
Метод белого ящика (тестирование стеклянного ящика/структурное тестирование)- доступ к коду есть. Тестирование, которое учитывает внутренние внутренние механизмы системы или компонента.

Метод черного ящика (или поведенческое тестирование) - доступа к коду нет. Это метод тестирования функционального поведения объекта(программы, системы) с точки зрения внешнего мира, при котором не используются знания о внутреннем устройстве (коде) тестируемого объекта. Иначе говоря, тестированием черного ящика занимаются тестировщики, не имеющие доступ к исходному коду приложения.
Под  “черным ящиком” понимается объект исследования, внутреннее устройство которого неизвестно.

Метод серого ящика - к части кода доступ есть, к части - нет. На основе ограниченного знания внутренней структуры ПО. В данном случае тестировщик не работает с кодом программного продукта, но он знаком с внутренней структурой программы и взаимодействием между компонентами.

- по запуску кода на исполнение (статическое, динамическое)
Статическое тестирование - без запуска кода на исполнение. Тестированию могут подвергаться документы (требования, тест-кейсы, схемы баз данных..), параметры (настройки) среды исполнения приложения, подготовленные тестовые данные, код приложения (часто выполняются самими программистами в рамках аудита кода), графические прототипы(эскизы пользовательского интерфейса). 
Динамическое тестирование - с запуском кода на исполнение. Запускаться может как код всего приложения целиком(системное тестирование), так и код нескольких взаимосвязанных частей(интеграционное тестирование) , отдельных частей(модульное тестирование) и даже отдельные участки кода.
Основная идея этого тестирования состоит в том, что проверяется реальное поведение (части) приложения.

- по степени важности тестируемых функций (виды тестирования, связанные с изменениями: smoke, regression, e2e, retest, new feature testing, критический путь)

Дымовое тестирование(smoke test)-проверка самой важной, самой ключевой функциональности, неработоспособность которой делает бессмысленной саму идею использования приложения (проверка самой важной функциональности программного продукта). 
Дымовое тестирование проводится после выхода нового билда, чтобы определить общий уровень качества приложения и принять решение о целесообразности выполнения тестирования критического пути и расширенного тестирования.

Тестирование критического пути(critical path test) - проверка функциональности, используемой типичными пользователями в повседневной деятельности.
Существует большинство пользователей, которые чаще всего используют некое подмножество функций приложения. Именно эти функции и нужно проверить, как только мы убедились, что  приложение “в принципе работает” (дымовой тест прошел успешно). Если по каким-то причинам приложение не выполняет эти функции или выполняет их некорректно, очень многие пользователи не смогут достичь множество своих целей.

Расширенное тестирование(extended test) - проверка всей заявленной функциональности. При этом также учитывается, какая функциональность является более важной, а какая - менее важной.

- по степени автоматизации (ручное, автоматизация)
Ручное тестирование - тест-кейсы выполняет человек вручную, без использования средств автоматизации..

Автоматизированное тестирование - тест-кейсы частично либо полностью выполняет специальное инструментальное средство, однако разработка тест-кейсов, подготовка данных, оценка результатов выполнения, написание отчетов об обнаруженных дефектах - все это и многое другое все равно делает человек.

- по принципу работы с приложениями (позитивное, негативное)
Позитивное тестирование - все действия с приложением выполняются строго по инструкции без никаких недопустимых действий, некорректных данных.Можно образно сказать, что приложение исследуется в “тепличных условиях”. Позитивная проверка - оценка ожидаемого поведения.Проводится в первую очередь, т.к. позволяет определить корректность программы.

Негативное тестирование - в работе с приложением выполняются (некорректные) операции и используются данные, потенциально приводящие к ошибкам(классика жанра -деление на ноль). Т.е. определение устойчивости системы в нестандартной ситуации.
Поскольку таких ситуаций в реальной жизни значительно больше(пользователи допускают ошибки, злоумышленники осознанно «ломают» приложение, в среде работы приложения возникают проблемы и т.д.), негативных тест-кейсов оказывается значительно больше, чем позитивных. В отличие от позитивных негативные тест-кейсы не стоит объединять, т.к. может привести к неверной трактовке поведения приложения и пропуску дефектов.


